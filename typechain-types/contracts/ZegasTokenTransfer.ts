/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ZegasTokenTransfer {
  export type TransferStruct = {
    from: AddressLike;
    to: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    chainId: BigNumberish;
    executeAfter: BigNumberish;
    executed: boolean;
    canceled: boolean;
  };

  export type TransferStructOutput = [
    from: string,
    to: string,
    token: string,
    amount: bigint,
    chainId: bigint,
    executeAfter: bigint,
    executed: boolean,
    canceled: boolean
  ] & {
    from: string;
    to: string;
    token: string;
    amount: bigint;
    chainId: bigint;
    executeAfter: bigint;
    executed: boolean;
    canceled: boolean;
  };
}

export interface ZegasTokenTransferInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelTransfer"
      | "executeTransfer"
      | "getTransfer"
      | "scheduleTransfer"
      | "transferCount"
      | "transfers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "TransferCanceled"
      | "TransferExecuted"
      | "TransferScheduled"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransfer",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfers", data: BytesLike): Result;
}

export namespace TransferCanceledEvent {
  export type InputTuple = [transferId: BigNumberish];
  export type OutputTuple = [transferId: bigint];
  export interface OutputObject {
    transferId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferExecutedEvent {
  export type InputTuple = [transferId: BigNumberish, executor: AddressLike];
  export type OutputTuple = [transferId: bigint, executor: string];
  export interface OutputObject {
    transferId: bigint;
    executor: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferScheduledEvent {
  export type InputTuple = [
    transferId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    chainId: BigNumberish,
    executeAfter: BigNumberish
  ];
  export type OutputTuple = [
    transferId: bigint,
    from: string,
    to: string,
    token: string,
    amount: bigint,
    chainId: bigint,
    executeAfter: bigint
  ];
  export interface OutputObject {
    transferId: bigint;
    from: string;
    to: string;
    token: string;
    amount: bigint;
    chainId: bigint;
    executeAfter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZegasTokenTransfer extends BaseContract {
  connect(runner?: ContractRunner | null): ZegasTokenTransfer;
  waitForDeployment(): Promise<this>;

  interface: ZegasTokenTransferInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelTransfer: TypedContractMethod<
    [transferId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTransfer: TypedContractMethod<
    [transferId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getTransfer: TypedContractMethod<
    [transferId: BigNumberish],
    [ZegasTokenTransfer.TransferStructOutput],
    "view"
  >;

  scheduleTransfer: TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      executeAfter: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  transferCount: TypedContractMethod<[], [bigint], "view">;

  transfers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        from: string;
        to: string;
        token: string;
        amount: bigint;
        chainId: bigint;
        executeAfter: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelTransfer"
  ): TypedContractMethod<[transferId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransfer"
  ): TypedContractMethod<[transferId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTransfer"
  ): TypedContractMethod<
    [transferId: BigNumberish],
    [ZegasTokenTransfer.TransferStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "scheduleTransfer"
  ): TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      executeAfter: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "transferCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint, bigint, boolean, boolean] & {
        from: string;
        to: string;
        token: string;
        amount: bigint;
        chainId: bigint;
        executeAfter: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "TransferCanceled"
  ): TypedContractEvent<
    TransferCanceledEvent.InputTuple,
    TransferCanceledEvent.OutputTuple,
    TransferCanceledEvent.OutputObject
  >;
  getEvent(
    key: "TransferExecuted"
  ): TypedContractEvent<
    TransferExecutedEvent.InputTuple,
    TransferExecutedEvent.OutputTuple,
    TransferExecutedEvent.OutputObject
  >;
  getEvent(
    key: "TransferScheduled"
  ): TypedContractEvent<
    TransferScheduledEvent.InputTuple,
    TransferScheduledEvent.OutputTuple,
    TransferScheduledEvent.OutputObject
  >;

  filters: {
    "TransferCanceled(uint256)": TypedContractEvent<
      TransferCanceledEvent.InputTuple,
      TransferCanceledEvent.OutputTuple,
      TransferCanceledEvent.OutputObject
    >;
    TransferCanceled: TypedContractEvent<
      TransferCanceledEvent.InputTuple,
      TransferCanceledEvent.OutputTuple,
      TransferCanceledEvent.OutputObject
    >;

    "TransferExecuted(uint256,address)": TypedContractEvent<
      TransferExecutedEvent.InputTuple,
      TransferExecutedEvent.OutputTuple,
      TransferExecutedEvent.OutputObject
    >;
    TransferExecuted: TypedContractEvent<
      TransferExecutedEvent.InputTuple,
      TransferExecutedEvent.OutputTuple,
      TransferExecutedEvent.OutputObject
    >;

    "TransferScheduled(uint256,address,address,address,uint256,uint256,uint64)": TypedContractEvent<
      TransferScheduledEvent.InputTuple,
      TransferScheduledEvent.OutputTuple,
      TransferScheduledEvent.OutputObject
    >;
    TransferScheduled: TypedContractEvent<
      TransferScheduledEvent.InputTuple,
      TransferScheduledEvent.OutputTuple,
      TransferScheduledEvent.OutputObject
    >;
  };
}
