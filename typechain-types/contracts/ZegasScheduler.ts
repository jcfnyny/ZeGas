/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ZegasSchedulerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancel"
      | "createJob"
      | "execute"
      | "jobCount"
      | "jobs"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "JobCanceled"
      | "JobCreated"
      | "JobExecuted"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace JobCanceledEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    owner: AddressLike,
    target: AddressLike
  ];
  export type OutputTuple = [jobId: bigint, owner: string, target: string];
  export interface OutputObject {
    jobId: bigint;
    owner: string;
    target: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobExecutedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    executor: AddressLike,
    gasUsedGwei: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    executor: string,
    gasUsedGwei: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    executor: string;
    gasUsedGwei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZegasScheduler extends BaseContract {
  connect(runner?: ContractRunner | null): ZegasScheduler;
  waitForDeployment(): Promise<this>;

  interface: ZegasSchedulerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancel: TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;

  createJob: TypedContractMethod<
    [
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxGasGwei: BigNumberish,
      startBlock: BigNumberish,
      deadlineBlock: BigNumberish
    ],
    [bigint],
    "payable"
  >;

  execute: TypedContractMethod<
    [jobId: BigNumberish, gasObservationGwei: BigNumberish],
    [void],
    "nonpayable"
  >;

  jobCount: TypedContractMethod<[], [bigint], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        owner: string;
        target: string;
        value: bigint;
        data: string;
        maxGasGwei: bigint;
        startBlock: bigint;
        deadlineBlock: bigint;
        bountyWei: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancel"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createJob"
  ): TypedContractMethod<
    [
      target: AddressLike,
      value: BigNumberish,
      data: BytesLike,
      maxGasGwei: BigNumberish,
      startBlock: BigNumberish,
      deadlineBlock: BigNumberish
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [jobId: BigNumberish, gasObservationGwei: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "jobCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        owner: string;
        target: string;
        value: bigint;
        data: string;
        maxGasGwei: bigint;
        startBlock: bigint;
        deadlineBlock: bigint;
        bountyWei: bigint;
        executed: boolean;
        canceled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "JobCanceled"
  ): TypedContractEvent<
    JobCanceledEvent.InputTuple,
    JobCanceledEvent.OutputTuple,
    JobCanceledEvent.OutputObject
  >;
  getEvent(
    key: "JobCreated"
  ): TypedContractEvent<
    JobCreatedEvent.InputTuple,
    JobCreatedEvent.OutputTuple,
    JobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "JobExecuted"
  ): TypedContractEvent<
    JobExecutedEvent.InputTuple,
    JobExecutedEvent.OutputTuple,
    JobExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "JobCanceled(uint256)": TypedContractEvent<
      JobCanceledEvent.InputTuple,
      JobCanceledEvent.OutputTuple,
      JobCanceledEvent.OutputObject
    >;
    JobCanceled: TypedContractEvent<
      JobCanceledEvent.InputTuple,
      JobCanceledEvent.OutputTuple,
      JobCanceledEvent.OutputObject
    >;

    "JobCreated(uint256,address,address)": TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;
    JobCreated: TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;

    "JobExecuted(uint256,address,uint256)": TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;
    JobExecuted: TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
