/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ZegasSmartTransfer {
  export type GasConditionsStruct = {
    maxBaseFeeGwei: BigNumberish;
    maxPriorityFeeGwei: BigNumberish;
    maxTotalFeeGwei: BigNumberish;
    enforceConditions: boolean;
  };

  export type GasConditionsStructOutput = [
    maxBaseFeeGwei: bigint,
    maxPriorityFeeGwei: bigint,
    maxTotalFeeGwei: bigint,
    enforceConditions: boolean
  ] & {
    maxBaseFeeGwei: bigint;
    maxPriorityFeeGwei: bigint;
    maxTotalFeeGwei: bigint;
    enforceConditions: boolean;
  };

  export type TimeWindowStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    executeOnExpiry: boolean;
  };

  export type TimeWindowStructOutput = [
    startTime: bigint,
    endTime: bigint,
    executeOnExpiry: boolean
  ] & { startTime: bigint; endTime: bigint; executeOnExpiry: boolean };

  export type TransferJobStruct = {
    from: AddressLike;
    to: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    chainId: BigNumberish;
    gasConditions: ZegasSmartTransfer.GasConditionsStruct;
    timeWindow: ZegasSmartTransfer.TimeWindowStruct;
    executed: boolean;
    canceled: boolean;
    purpose: string;
    nonce: BigNumberish;
  };

  export type TransferJobStructOutput = [
    from: string,
    to: string,
    token: string,
    amount: bigint,
    chainId: bigint,
    gasConditions: ZegasSmartTransfer.GasConditionsStructOutput,
    timeWindow: ZegasSmartTransfer.TimeWindowStructOutput,
    executed: boolean,
    canceled: boolean,
    purpose: string,
    nonce: bigint
  ] & {
    from: string;
    to: string;
    token: string;
    amount: bigint;
    chainId: bigint;
    gasConditions: ZegasSmartTransfer.GasConditionsStructOutput;
    timeWindow: ZegasSmartTransfer.TimeWindowStructOutput;
    executed: boolean;
    canceled: boolean;
    purpose: string;
    nonce: bigint;
  };
}

export interface ZegasSmartTransferInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizedRelayers"
      | "canExecuteJob"
      | "cancelTransfer"
      | "executeTransfer"
      | "feeCollector"
      | "getJob"
      | "jobCount"
      | "jobs"
      | "owner"
      | "platformFeeBps"
      | "renounceOwnership"
      | "scheduleTransfer"
      | "scheduleTransferWithPermit"
      | "setRelayerAuthorization"
      | "transferOwnership"
      | "updateFee"
      | "userNonces"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeUpdated"
      | "JobCanceled"
      | "JobExecuted"
      | "JobScheduled"
      | "OwnershipTransferred"
      | "RelayerAuthorized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizedRelayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecuteJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransfer",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      ZegasSmartTransfer.GasConditionsStruct,
      ZegasSmartTransfer.TimeWindowStruct,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransferWithPermit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      ZegasSmartTransfer.GasConditionsStruct,
      ZegasSmartTransfer.TimeWindowStruct,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRelayerAuthorization",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "userNonces",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canExecuteJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransferWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRelayerAuthorization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userNonces", data: BytesLike): Result;
}

export namespace FeeUpdatedEvent {
  export type InputTuple = [newFeeBps: BigNumberish, newCollector: AddressLike];
  export type OutputTuple = [newFeeBps: bigint, newCollector: string];
  export interface OutputObject {
    newFeeBps: bigint;
    newCollector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCanceledEvent {
  export type InputTuple = [jobId: BigNumberish, canceler: AddressLike];
  export type OutputTuple = [jobId: bigint, canceler: string];
  export interface OutputObject {
    jobId: bigint;
    canceler: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobExecutedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    executor: AddressLike,
    actualBaseFee: BigNumberish,
    actualPriorityFee: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    executor: string,
    actualBaseFee: bigint,
    actualPriorityFee: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    executor: string;
    actualBaseFee: bigint;
    actualPriorityFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobScheduledEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    maxBaseFeeGwei: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    from: string,
    to: string,
    token: string,
    amount: bigint,
    startTime: bigint,
    endTime: bigint,
    maxBaseFeeGwei: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    from: string;
    to: string;
    token: string;
    amount: bigint;
    startTime: bigint;
    endTime: bigint;
    maxBaseFeeGwei: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerAuthorizedEvent {
  export type InputTuple = [relayer: AddressLike, status: boolean];
  export type OutputTuple = [relayer: string, status: boolean];
  export interface OutputObject {
    relayer: string;
    status: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZegasSmartTransfer extends BaseContract {
  connect(runner?: ContractRunner | null): ZegasSmartTransfer;
  waitForDeployment(): Promise<this>;

  interface: ZegasSmartTransferInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizedRelayers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  canExecuteJob: TypedContractMethod<
    [jobId: BigNumberish],
    [[boolean, string] & { canExecute: boolean; reason: string }],
    "view"
  >;

  cancelTransfer: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTransfer: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  getJob: TypedContractMethod<
    [jobId: BigNumberish],
    [ZegasSmartTransfer.TransferJobStructOutput],
    "view"
  >;

  jobCount: TypedContractMethod<[], [bigint], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        ZegasSmartTransfer.GasConditionsStructOutput,
        ZegasSmartTransfer.TimeWindowStructOutput,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        from: string;
        to: string;
        token: string;
        amount: bigint;
        chainId: bigint;
        gasConditions: ZegasSmartTransfer.GasConditionsStructOutput;
        timeWindow: ZegasSmartTransfer.TimeWindowStructOutput;
        executed: boolean;
        canceled: boolean;
        purpose: string;
        nonce: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  scheduleTransfer: TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      gasConditions: ZegasSmartTransfer.GasConditionsStruct,
      timeWindow: ZegasSmartTransfer.TimeWindowStruct,
      purpose: string
    ],
    [bigint],
    "payable"
  >;

  scheduleTransferWithPermit: TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      gasConditions: ZegasSmartTransfer.GasConditionsStruct,
      timeWindow: ZegasSmartTransfer.TimeWindowStruct,
      purpose: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;

  setRelayerAuthorization: TypedContractMethod<
    [relayer: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFee: TypedContractMethod<
    [newFeeBps: BigNumberish, newCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  userNonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizedRelayers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canExecuteJob"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [[boolean, string] & { canExecute: boolean; reason: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelTransfer"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTransfer"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [ZegasSmartTransfer.TransferJobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "jobCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        ZegasSmartTransfer.GasConditionsStructOutput,
        ZegasSmartTransfer.TimeWindowStructOutput,
        boolean,
        boolean,
        string,
        bigint
      ] & {
        from: string;
        to: string;
        token: string;
        amount: bigint;
        chainId: bigint;
        gasConditions: ZegasSmartTransfer.GasConditionsStructOutput;
        timeWindow: ZegasSmartTransfer.TimeWindowStructOutput;
        executed: boolean;
        canceled: boolean;
        purpose: string;
        nonce: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scheduleTransfer"
  ): TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      gasConditions: ZegasSmartTransfer.GasConditionsStruct,
      timeWindow: ZegasSmartTransfer.TimeWindowStruct,
      purpose: string
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "scheduleTransferWithPermit"
  ): TypedContractMethod<
    [
      to: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      gasConditions: ZegasSmartTransfer.GasConditionsStruct,
      timeWindow: ZegasSmartTransfer.TimeWindowStruct,
      purpose: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRelayerAuthorization"
  ): TypedContractMethod<
    [relayer: AddressLike, status: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFee"
  ): TypedContractMethod<
    [newFeeBps: BigNumberish, newCollector: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "userNonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "FeeUpdated"
  ): TypedContractEvent<
    FeeUpdatedEvent.InputTuple,
    FeeUpdatedEvent.OutputTuple,
    FeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JobCanceled"
  ): TypedContractEvent<
    JobCanceledEvent.InputTuple,
    JobCanceledEvent.OutputTuple,
    JobCanceledEvent.OutputObject
  >;
  getEvent(
    key: "JobExecuted"
  ): TypedContractEvent<
    JobExecutedEvent.InputTuple,
    JobExecutedEvent.OutputTuple,
    JobExecutedEvent.OutputObject
  >;
  getEvent(
    key: "JobScheduled"
  ): TypedContractEvent<
    JobScheduledEvent.InputTuple,
    JobScheduledEvent.OutputTuple,
    JobScheduledEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RelayerAuthorized"
  ): TypedContractEvent<
    RelayerAuthorizedEvent.InputTuple,
    RelayerAuthorizedEvent.OutputTuple,
    RelayerAuthorizedEvent.OutputObject
  >;

  filters: {
    "FeeUpdated(uint256,address)": TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;
    FeeUpdated: TypedContractEvent<
      FeeUpdatedEvent.InputTuple,
      FeeUpdatedEvent.OutputTuple,
      FeeUpdatedEvent.OutputObject
    >;

    "JobCanceled(uint256,address)": TypedContractEvent<
      JobCanceledEvent.InputTuple,
      JobCanceledEvent.OutputTuple,
      JobCanceledEvent.OutputObject
    >;
    JobCanceled: TypedContractEvent<
      JobCanceledEvent.InputTuple,
      JobCanceledEvent.OutputTuple,
      JobCanceledEvent.OutputObject
    >;

    "JobExecuted(uint256,address,uint256,uint256)": TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;
    JobExecuted: TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;

    "JobScheduled(uint256,address,address,address,uint256,uint64,uint64,uint256)": TypedContractEvent<
      JobScheduledEvent.InputTuple,
      JobScheduledEvent.OutputTuple,
      JobScheduledEvent.OutputObject
    >;
    JobScheduled: TypedContractEvent<
      JobScheduledEvent.InputTuple,
      JobScheduledEvent.OutputTuple,
      JobScheduledEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RelayerAuthorized(address,bool)": TypedContractEvent<
      RelayerAuthorizedEvent.InputTuple,
      RelayerAuthorizedEvent.OutputTuple,
      RelayerAuthorizedEvent.OutputObject
    >;
    RelayerAuthorized: TypedContractEvent<
      RelayerAuthorizedEvent.InputTuple,
      RelayerAuthorizedEvent.OutputTuple,
      RelayerAuthorizedEvent.OutputObject
    >;
  };
}
