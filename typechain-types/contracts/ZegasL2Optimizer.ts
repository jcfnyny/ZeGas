/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ZegasL2Optimizer {
  export type L2JobStruct = {
    sender: AddressLike;
    token: AddressLike;
    recipient: AddressLike;
    amount: BigNumberish;
    maxGasCap: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    preferredL2s: BigNumberish[];
    executeOnExpiry: boolean;
    allowL1Fallback: boolean;
    useBatching: boolean;
    feeToken: AddressLike;
    executed: boolean;
    cancelled: boolean;
    executedAt: BigNumberish;
    executedOn: BigNumberish;
  };

  export type L2JobStructOutput = [
    sender: string,
    token: string,
    recipient: string,
    amount: bigint,
    maxGasCap: bigint,
    startTime: bigint,
    endTime: bigint,
    preferredL2s: bigint[],
    executeOnExpiry: boolean,
    allowL1Fallback: boolean,
    useBatching: boolean,
    feeToken: string,
    executed: boolean,
    cancelled: boolean,
    executedAt: bigint,
    executedOn: bigint
  ] & {
    sender: string;
    token: string;
    recipient: string;
    amount: bigint;
    maxGasCap: bigint;
    startTime: bigint;
    endTime: bigint;
    preferredL2s: bigint[];
    executeOnExpiry: boolean;
    allowL1Fallback: boolean;
    useBatching: boolean;
    feeToken: string;
    executed: boolean;
    cancelled: boolean;
    executedAt: bigint;
    executedOn: bigint;
  };
}

export interface ZegasL2OptimizerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizeRelayer"
      | "authorizedRelayers"
      | "canExecute"
      | "cancelTransfer"
      | "configureL2Network"
      | "executeTransfer"
      | "feeCollector"
      | "getJob"
      | "getL2Threshold"
      | "jobs"
      | "l2Bridges"
      | "l2GasThresholds"
      | "nextJobId"
      | "owner"
      | "platformFeeBps"
      | "renounceOwnership"
      | "revokeRelayer"
      | "scheduleTransfer"
      | "setFeeCollector"
      | "setPlatformFee"
      | "supportedNetworks"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeCollectorUpdated"
      | "JobCancelled"
      | "JobExecuted"
      | "JobScheduled"
      | "L2NetworkConfigured"
      | "OwnershipTransferred"
      | "PlatformFeeUpdated"
      | "RelayerAuthorized"
      | "RelayerRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "authorizeRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedRelayers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canExecute",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "configureL2Network",
    values: [BigNumberish, AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransfer",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getL2Threshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "l2Bridges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "l2GasThresholds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nextJobId", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "platformFeeBps",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRelayer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "scheduleTransfer",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      boolean,
      boolean,
      boolean,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPlatformFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedNetworks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "configureL2Network",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getL2Threshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2Bridges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "l2GasThresholds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextJobId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "platformFeeBps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scheduleTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPlatformFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedNetworks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FeeCollectorUpdatedEvent {
  export type InputTuple = [newCollector: AddressLike];
  export type OutputTuple = [newCollector: string];
  export interface OutputObject {
    newCollector: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCancelledEvent {
  export type InputTuple = [jobId: BigNumberish, sender: AddressLike];
  export type OutputTuple = [jobId: bigint, sender: string];
  export interface OutputObject {
    jobId: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobExecutedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    executedOn: BigNumberish,
    gasPriceGwei: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    executedOn: bigint,
    gasPriceGwei: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    executedOn: bigint;
    gasPriceGwei: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobScheduledEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    sender: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    preferredL2s: BigNumberish[]
  ];
  export type OutputTuple = [
    jobId: bigint,
    sender: string,
    token: string,
    amount: bigint,
    preferredL2s: bigint[]
  ];
  export interface OutputObject {
    jobId: bigint;
    sender: string;
    token: string;
    amount: bigint;
    preferredL2s: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace L2NetworkConfiguredEvent {
  export type InputTuple = [
    network: BigNumberish,
    bridge: AddressLike,
    gasThreshold: BigNumberish
  ];
  export type OutputTuple = [
    network: bigint,
    bridge: string,
    gasThreshold: bigint
  ];
  export interface OutputObject {
    network: bigint;
    bridge: string;
    gasThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlatformFeeUpdatedEvent {
  export type InputTuple = [newFeeBps: BigNumberish];
  export type OutputTuple = [newFeeBps: bigint];
  export interface OutputObject {
    newFeeBps: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerAuthorizedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RelayerRevokedEvent {
  export type InputTuple = [relayer: AddressLike];
  export type OutputTuple = [relayer: string];
  export interface OutputObject {
    relayer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ZegasL2Optimizer extends BaseContract {
  connect(runner?: ContractRunner | null): ZegasL2Optimizer;
  waitForDeployment(): Promise<this>;

  interface: ZegasL2OptimizerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizeRelayer: TypedContractMethod<
    [relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  authorizedRelayers: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  canExecute: TypedContractMethod<
    [jobId: BigNumberish, currentGasPrice: BigNumberish, network: BigNumberish],
    [boolean],
    "view"
  >;

  cancelTransfer: TypedContractMethod<
    [jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  configureL2Network: TypedContractMethod<
    [
      network: BigNumberish,
      bridge: AddressLike,
      gasThreshold: BigNumberish,
      enabled: boolean
    ],
    [void],
    "nonpayable"
  >;

  executeTransfer: TypedContractMethod<
    [
      jobId: BigNumberish,
      currentGasPrice: BigNumberish,
      selectedL2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  feeCollector: TypedContractMethod<[], [string], "view">;

  getJob: TypedContractMethod<
    [jobId: BigNumberish],
    [ZegasL2Optimizer.L2JobStructOutput],
    "view"
  >;

  getL2Threshold: TypedContractMethod<
    [network: BigNumberish],
    [bigint],
    "view"
  >;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        string,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        sender: string;
        token: string;
        recipient: string;
        amount: bigint;
        maxGasCap: bigint;
        startTime: bigint;
        endTime: bigint;
        executeOnExpiry: boolean;
        allowL1Fallback: boolean;
        useBatching: boolean;
        feeToken: string;
        executed: boolean;
        cancelled: boolean;
        executedAt: bigint;
        executedOn: bigint;
      }
    ],
    "view"
  >;

  l2Bridges: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  l2GasThresholds: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  nextJobId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  platformFeeBps: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  revokeRelayer: TypedContractMethod<
    [relayer: AddressLike],
    [void],
    "nonpayable"
  >;

  scheduleTransfer: TypedContractMethod<
    [
      token: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      maxGasCap: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      preferredL2s: BigNumberish[],
      executeOnExpiry: boolean,
      allowL1Fallback: boolean,
      useBatching: boolean,
      feeToken: AddressLike
    ],
    [bigint],
    "payable"
  >;

  setFeeCollector: TypedContractMethod<
    [newCollector: AddressLike],
    [void],
    "nonpayable"
  >;

  setPlatformFee: TypedContractMethod<
    [newFeeBps: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedNetworks: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizeRelayer"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedRelayers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "canExecute"
  ): TypedContractMethod<
    [jobId: BigNumberish, currentGasPrice: BigNumberish, network: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelTransfer"
  ): TypedContractMethod<[jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "configureL2Network"
  ): TypedContractMethod<
    [
      network: BigNumberish,
      bridge: AddressLike,
      gasThreshold: BigNumberish,
      enabled: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeTransfer"
  ): TypedContractMethod<
    [
      jobId: BigNumberish,
      currentGasPrice: BigNumberish,
      selectedL2: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "feeCollector"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [jobId: BigNumberish],
    [ZegasL2Optimizer.L2JobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getL2Threshold"
  ): TypedContractMethod<[network: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean,
        string,
        boolean,
        boolean,
        bigint,
        bigint
      ] & {
        sender: string;
        token: string;
        recipient: string;
        amount: bigint;
        maxGasCap: bigint;
        startTime: bigint;
        endTime: bigint;
        executeOnExpiry: boolean;
        allowL1Fallback: boolean;
        useBatching: boolean;
        feeToken: string;
        executed: boolean;
        cancelled: boolean;
        executedAt: bigint;
        executedOn: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "l2Bridges"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "l2GasThresholds"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextJobId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "platformFeeBps"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRelayer"
  ): TypedContractMethod<[relayer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "scheduleTransfer"
  ): TypedContractMethod<
    [
      token: AddressLike,
      recipient: AddressLike,
      amount: BigNumberish,
      maxGasCap: BigNumberish,
      startTime: BigNumberish,
      endTime: BigNumberish,
      preferredL2s: BigNumberish[],
      executeOnExpiry: boolean,
      allowL1Fallback: boolean,
      useBatching: boolean,
      feeToken: AddressLike
    ],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setFeeCollector"
  ): TypedContractMethod<[newCollector: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPlatformFee"
  ): TypedContractMethod<[newFeeBps: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportedNetworks"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "FeeCollectorUpdated"
  ): TypedContractEvent<
    FeeCollectorUpdatedEvent.InputTuple,
    FeeCollectorUpdatedEvent.OutputTuple,
    FeeCollectorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JobCancelled"
  ): TypedContractEvent<
    JobCancelledEvent.InputTuple,
    JobCancelledEvent.OutputTuple,
    JobCancelledEvent.OutputObject
  >;
  getEvent(
    key: "JobExecuted"
  ): TypedContractEvent<
    JobExecutedEvent.InputTuple,
    JobExecutedEvent.OutputTuple,
    JobExecutedEvent.OutputObject
  >;
  getEvent(
    key: "JobScheduled"
  ): TypedContractEvent<
    JobScheduledEvent.InputTuple,
    JobScheduledEvent.OutputTuple,
    JobScheduledEvent.OutputObject
  >;
  getEvent(
    key: "L2NetworkConfigured"
  ): TypedContractEvent<
    L2NetworkConfiguredEvent.InputTuple,
    L2NetworkConfiguredEvent.OutputTuple,
    L2NetworkConfiguredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PlatformFeeUpdated"
  ): TypedContractEvent<
    PlatformFeeUpdatedEvent.InputTuple,
    PlatformFeeUpdatedEvent.OutputTuple,
    PlatformFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerAuthorized"
  ): TypedContractEvent<
    RelayerAuthorizedEvent.InputTuple,
    RelayerAuthorizedEvent.OutputTuple,
    RelayerAuthorizedEvent.OutputObject
  >;
  getEvent(
    key: "RelayerRevoked"
  ): TypedContractEvent<
    RelayerRevokedEvent.InputTuple,
    RelayerRevokedEvent.OutputTuple,
    RelayerRevokedEvent.OutputObject
  >;

  filters: {
    "FeeCollectorUpdated(address)": TypedContractEvent<
      FeeCollectorUpdatedEvent.InputTuple,
      FeeCollectorUpdatedEvent.OutputTuple,
      FeeCollectorUpdatedEvent.OutputObject
    >;
    FeeCollectorUpdated: TypedContractEvent<
      FeeCollectorUpdatedEvent.InputTuple,
      FeeCollectorUpdatedEvent.OutputTuple,
      FeeCollectorUpdatedEvent.OutputObject
    >;

    "JobCancelled(uint256,address)": TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;
    JobCancelled: TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;

    "JobExecuted(uint256,uint8,uint256,uint256)": TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;
    JobExecuted: TypedContractEvent<
      JobExecutedEvent.InputTuple,
      JobExecutedEvent.OutputTuple,
      JobExecutedEvent.OutputObject
    >;

    "JobScheduled(uint256,address,address,uint256,uint8[])": TypedContractEvent<
      JobScheduledEvent.InputTuple,
      JobScheduledEvent.OutputTuple,
      JobScheduledEvent.OutputObject
    >;
    JobScheduled: TypedContractEvent<
      JobScheduledEvent.InputTuple,
      JobScheduledEvent.OutputTuple,
      JobScheduledEvent.OutputObject
    >;

    "L2NetworkConfigured(uint8,address,uint256)": TypedContractEvent<
      L2NetworkConfiguredEvent.InputTuple,
      L2NetworkConfiguredEvent.OutputTuple,
      L2NetworkConfiguredEvent.OutputObject
    >;
    L2NetworkConfigured: TypedContractEvent<
      L2NetworkConfiguredEvent.InputTuple,
      L2NetworkConfiguredEvent.OutputTuple,
      L2NetworkConfiguredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PlatformFeeUpdated(uint256)": TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;
    PlatformFeeUpdated: TypedContractEvent<
      PlatformFeeUpdatedEvent.InputTuple,
      PlatformFeeUpdatedEvent.OutputTuple,
      PlatformFeeUpdatedEvent.OutputObject
    >;

    "RelayerAuthorized(address)": TypedContractEvent<
      RelayerAuthorizedEvent.InputTuple,
      RelayerAuthorizedEvent.OutputTuple,
      RelayerAuthorizedEvent.OutputObject
    >;
    RelayerAuthorized: TypedContractEvent<
      RelayerAuthorizedEvent.InputTuple,
      RelayerAuthorizedEvent.OutputTuple,
      RelayerAuthorizedEvent.OutputObject
    >;

    "RelayerRevoked(address)": TypedContractEvent<
      RelayerRevokedEvent.InputTuple,
      RelayerRevokedEvent.OutputTuple,
      RelayerRevokedEvent.OutputObject
    >;
    RelayerRevoked: TypedContractEvent<
      RelayerRevokedEvent.InputTuple,
      RelayerRevokedEvent.OutputTuple,
      RelayerRevokedEvent.OutputObject
    >;
  };
}
